set nocompatible              " be iMproved, required
filetype off                  " required

autocmd BufRead,BufNewFile *.tf set filetype=terraform
" autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')

set termguicolors

" set ttymouse=xterm2
syntax enable

source $HOME/.vim/plugins

set rtp+=/usr/local/opt/fzf
set directory=~/.vim/swapfiles,/var/tmp,/tmp,.

let mapleader=',' " set leader to ,

" Open a vertical split
map <leader>v <C-W>v

map <leader>l :ll<CR>

set splitbelow

inoremap <C-CR> <ESC>

" Go into insert mode on a newline below this one
nmap ]<space> A<CR>

" Use Control-N to clear the highlighted search
nmap <silent> <C-N> :silent noh<CR>

map <leader>be :CtrlPBuffer<CR>
map <leader>bo :Files<CR>

nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>:nohlsearch<CR>

set wildmenu     " fancy command completion menu!
set wildmode=list:longest

" Miscellaneous Options. Values:
"   a: ":read" sets window filename
"   A: ":write" sets window filename
"   B: backslash has no special meaning in ":map"
"   c: search continues from the end of the match
"   e: automatically add <CR> to the end of executed registers
"   F: ":write" sets buffer filename
"   s: set buffer options on entering the buffer
"   W: refuse to overwrite a readonly file, even with :w!
"   Z: don't reset 'readonly' when using :w!
set cpoptions=aABceFsWZ

set number      " show line numbers
set showbreak=+ " display a + at the beginning of a wrapped line
set showmatch   " flash the matching bracket on inserting a )]} etc
set linebreak 

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set autowrite

set autoindent " automatically indent new lines
set softtabstop=2 " most of the time, we want a softtabstop of 4
set shiftwidth=2  " shift by 4 spaces when using >> and <<, etc
set tabstop=2
set expandtab     " no tabs, just spaces kthx.

" Using autocmd for this allows it to be reset every time you open a
" file, which keeps overrides from being persistent
autocmd FileType * set softtabstop=2 shiftwidth=2 tabstop=2 expandtab

autocmd BufNewFile,BufRead *.slim setlocal filetype=slim

"set list                     " show whitespace
set listchars=tab:»·,trail:· " show tabs and trailing spaces
set listchars+=extends:»     " show a » when a line goes off the right
                             " edge of the screen
set listchars+=precedes:«    " show a « when a line goes off the left
                             " edge of the screen

" only show the menu on completions
set completeopt=menu

set ignorecase " makes search patterns case-insensitive by default
set smartcase  " overrides ignorecase when the pattern contains
               " upper-case characters
set incsearch  " incremental search. 'nuf said
set hlsearch   " highlight searches

augroup MRISettings
au BufRead,BufNewFile ~/git/ruby/*.[ch] setl tabstop=8 shiftwidth=4 softtabstop=4 noexpandtab
augroup END

" in makefiles, don't expand tabs to spaces, since actual tab characters are
" needed, and have indentation at 8 chars to be sure that all indents are tabs
" (despite the mappings later):
autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=0

" autocmd FileType markdown set tw=78

" replace the normal word movement keys with smart versions
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e

let NERDCreateDefaultMappings=0 " disable default mappings
let NERDMenuMode=0              " disable menu
let NERDSpaceDelims=1           " place spaces after comment chars
let NERDDefaultNesting=0        " don't recomment commented lines

map <leader>cc <plug>NERDCommenterToggle
map <leader>cC <plug>NERDCommenterSexy
map <leader>cu <plug>NERDCommenterUncomment

" map <leader>i :GoInfo<CR>
" map <leader>d :<C-u>call go#def#Jump("split", 0)<CR>
let g:go_fmt_command = "goimports"
let g:go_highlight_extra_types = 1
let g:go_info_mode = 'guru'
" let g:go_auto_type_info = 1
"
"
let g:go_term_enabled = 1
let g:go_term_mode = "split"
let g:go_term_height = 10

let g:go_gopls_enabled = 0

" set omnifunc=syntaxcomplete#Complete

" let g:deoplete#enable_at_startup = 1
" call deoplete#custom#option('sources', { 'go': ['go', 'buffer'] })

let g:delve_new_command = "new"

let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabClosePreviewOnPopupClose = 1

let g:deoplete#sources#clang#libclang_path = "/Library/Developer/CommandLineTools/usr/lib/libclang.dylib"
let g:deoplete#sources#clang#clang_header = "/Library/Developer/CommandLineTools//usr/lib/clang/9.0.0/include"

let g:ale_linters = {
\   'ruby': ['reek', 'ruby'],
\   'go': [],
\}

let g:ale_lint_on_text_changed = "never"
let g:ale_lint_on_insert_leave = 1

let g:terraform_align=1
let g:terraform_fmt_on_save=1

highlight link ALEWarning WarningMsg

autocmd BufRead,BufNewFile *.chell setfiletype bzl

set ruler          " shows cursor position in the lower right
set showcmd        " shows incomplete command to the left of the ruler
set winminheight=1 " allow windows to be 0 lines tall
set winminwidth=1  " allow windows to be 0 lines wide
set laststatus=2   " always show statusline

" set up statusline, ends up looking like this:
"
"   [1] window.vimrc [Preview] [vim,+]          0x00 @ l22 c51 (88%)
"
" set statusline=
" set statusline+=%n:\                      " buffer number
" set statusline+=%f                        " filename
" set statusline+=%<                        " truncate here if necessary
" set statusline+=%10w                      " displays [Preview] if it is
" set statusline+=\ [                       " fix spacing, open bracket
" set statusline+=%{strlen(&ft)?&ft:'none'} " filetype
" set statusline+=%M                        " + if modified, - if r/o
" set statusline+=]                         " close bracket
" set statusline+=%=                        " right-align remainder
" set statusline+=0x%02B\                   " character hex value
" set statusline+=@\ L%l\ C%c\ (%P)\        " position in file


highlight link GitGutterAdd Question
highlight link GitGutterChange Type
highlight link GitGutterDelete DiffDelete

let g:terraform_fmt_on_save=1

tnoremap <Esc> <C-\><C-n>
tnoremap <C-h> <C-\><C-N><C-w>h
tnoremap <C-j> <C-\><C-N><C-w>j
tnoremap <C-k> <C-\><C-N><C-w>k
tnoremap <C-l> <C-\><C-N><C-w>l

let g:go_def_mapping_enabled = 0

" Better display for messages
" set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" inoremap <silent><expr> <TAB>
      " \ pumvisible() ? "\<C-n>" :
      " \ <SID>check_back_space() ? "\<TAB>" :
      " \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" function! s:check_back_space() abort
  " let col = col('.') - 1
  " return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'


" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

map <leader>d :<C-u>call CocActionAsync("jumpDefinition", "split")<CR>

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
map <leader>i :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)


" Add diagnostic info for https://github.com/itchyny/lightline.vim
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status'
      \ },
      \ }



" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

if has("gui_running")
    source $HOME/.vim/gui
else
    source $HOME/.vim/term
endif

packloadall
silent! helptags ALL

